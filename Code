#include <iostream>
#include <algorithm>
#include <random>
#include <ctime>
#include <limits>
#include <windows.h>
#include <vector>
#include <string>

using namespace std;

// Global player hands
vector<string> p1Hand;
vector<string> p2Hand;
vector<string> p3Hand;

// Cards played this round
string p1CardPlayed, p2CardPlayed, p3CardPlayed;

// Track all cards played (to find lowest card at the end)
vector<string> playedCardsP1;
vector<string> playedCardsP2;
vector<string> playedCardsP3;

// Function declarations
void game();
void displayRules();
void scoreboard();
void dealCards();
int getCardValue(const string& card);
string getSuit(const string& card);
int findLowestCardIndex(const vector<string>& hand);
int findMatchingOrHigherCardIndex(const vector<string>& hand, int minValue);
string playCardForAI(vector<string>& hand, int currentMax);
void playRound(int startingPlayer);
void roundEndGraphics(const string& p1Card, const string& p2Card, const string& p3Card);
void showHand();
void endGame();

void drawCardBox(const string& card) {
    string rank;
    char suit;
    if (card.size() == 3) { // e.g. "10H"
        rank = card.substr(0, 2);
        suit = card[2];
    }
    else {
        rank = card.substr(0, 1);
        suit = card[1];
    }

    char suitSymbol = ' ';

    switch (suit) {
        case 'H': suitSymbol = '\3'; break;  // Heart ♥
        case 'D': suitSymbol = '\4'; break;  // Diamond ♦
        case 'S': suitSymbol = '\6'; break;  // Spade ♠
        case 'C': suitSymbol = '\5'; break;  // Club ♣
        default: suitSymbol = suit; break;   // unknown suit
    }

    cout << "┌─────┐\n";
    cout << "│" << rank;
    if (rank.size() == 1) cout << " "; // pad single char rank
    cout << "   │\n";
    cout << "│  " << suitSymbol << "  │\n";
    cout << "│   ";
    if (rank.size() == 1) cout << " ";
    cout << rank << "│\n";
    cout << "└─────┘\n";
}


void roundEndGraphics(const string& p1Card, const string& p2Card, const string& p3Card) {
    cout << "\nCards played this round:\n";

    cout << "Player 1:\n";
    drawCardBox(p1Card);

    cout << "Player 2:\n";
    drawCardBox(p2Card);

    cout << "Player 3:\n";
    drawCardBox(p3Card);

    cout << "\n";
}

int main()
{
    SetConsoleOutputCP(CP_UTF8);
    game(); // This controls everything
    return 0;
}

void game() {
    char homeInput;

    cout << "╔═══════════════════════════════════════════════╗\n";
    cout << "║             ╔═══╦╗ ╔╦═══╦╗╔═╦═══╗             ║\n";
    cout << "║             ║╔═╗║║ ║║╔═╗║║║╔╣╔═╗║             ║\n";
    cout << "║             ║║ ╚╣║ ║║╚═╝║╚╝╝║║ ║║             ║\n";
    cout << "║             ║║╔═╣║ ║║╔╗╔╣╔╗║║╚═╝║             ║\n";
    cout << "║             ║╚╩═║╚═╝║║║╚╣║║╚╣╔═╗║             ║\n";
    cout << "║             ╚═══╩═══╩╝╚═╩╝╚═╩╝ ╚╝             ║\n";
    cout << "╚═══════════════════════════════════════════════╝\n";
    cout << "            Press 1 to start the game            \n";
    cout << "            Press 2 to view the rules            \n";
    cout << "            Press 3 to view the score            \n";
    cout << "            Press 0 to close the game            \n";
    cin >> homeInput;

    if (homeInput == '2') {
        system("cls");
        displayRules();
    }
    else if (homeInput == '1') {
        cout << "Starting the game...\n";
        system("cls");
        dealCards();
        playRound(1); // Player 1 starts the first round
    }
    else if (homeInput == '3') {
        system("cls");
        scoreboard();
    }
    else if (homeInput == '0') {
        cout << "Exiting...\n";
        exit(0);
    }
    else {
        system("cls");
        cout << "Invalid input. Please try again.\n";
        game(); // restart the prompt
    }
}

void displayRules() {
    char rulesInput;

    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                    The Rules of Gurka                                          ║\n";
    cout << "║                                                                                                ║\n";
    cout << "║Gurka is played by 3-7 players                                                                  ║\n";
    cout << "║Each player is dealt 6 cards                                                                    ║\n";
    cout << "║Player 1 goes first to start, and the winner of each trick (round) begins the next one          ║\n";
    cout << "║Play goes in numerical order (1, 2, 3, etc. for game start)                                     ║\n";
    cout << "║H, D, S, and C after a number represent card (E.X. 10S is the 10 of Spades)                     ║\n";
    cout << "║After the first card in each round, players must match or beat the value of the highest card    ║\n";
    cout << "║If this is not possible, your lowest value card must be played                                  ║\n";
    cout << "║Repeat this until all players have 1 card left                                                  ║\n";
    cout << "║The player with the lowest value card at the end wins                                           ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> rulesInput;

    if (rulesInput == '0') {
        cout << "Exiting...\n";
        exit(0);
    }
    else {
        system("cls");
        game();
    }
}

// Displays a scoreboard showing how many wins each player gets.
// May be buggy.
void scoreboard()
{
    char scoreInput;
    int p1Score;
    int p2Score;
    int p3Score;
    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                            Scoreboard                                          ║\n";
    cout << "║Every win each player gets will appear here.                                                    ║\n";
    cout << "║Resets when the game is closed.                                                                 ║\n";
    cout << "║Player 1's Score: " << p1Score << "                                                            ║\n";
    cout << "║Player 2's Score: " << p2Score << "                                                            ║\n";
    cout << "║Player 3's Score: " << p3Score << "                                                            ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> scoreInput;

    if (scoreInput = '0')
    {
        exit(0);
    }
    else
    {
        game();
    }

}

void dealCards()
{
    vector<string> deck = {
        "2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "10H", "JH", "QH", "KH", "AH",
        "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "10D", "JD", "QD", "KD", "AD",
        "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "10S", "JS", "QS", "KS", "AS",
        "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "10C", "JC", "QC", "KC", "AC"
    };

    random_device rd;
    mt19937 g(rd());
    shuffle(deck.begin(), deck.end(), g);

    p1Hand.clear();
    p2Hand.clear();
    p3Hand.clear();
    playedCardsP1.clear();
    playedCardsP2.clear();
    playedCardsP3.clear();

    for (int i = 0; i < 6; ++i) {
        p1Hand.push_back(deck.back()); deck.pop_back();
        p2Hand.push_back(deck.back()); deck.pop_back();
        p3Hand.push_back(deck.back()); deck.pop_back();
    }

    // Show only Player 1's hand:
    cout << "Player 1's hand: ";
    for (int i = 0; i < 6; ++i)
        cout << "(" << (i + 1) << ") " << p1Hand[i] << " ";
    cout << "\n\n";

    cout << "(Other players' cards are hidden.)\n\n";
}

int getCardValue(const string& card)
{
    string rank;

    if (card.size() == 3) // e.g. "10H"
        rank = card.substr(0, 2);
    else
        rank = card.substr(0, 1);

    if (rank == "A") return 14;
    if (rank == "K") return 13;
    if (rank == "Q") return 12;
    if (rank == "J") return 11;

    try {
        return stoi(rank);
    }
    catch (...) {
        return 0;
    }
}

string getSuit(const string& card) {
    return card.substr(card.size() - 1, 1);
}

// Find lowest card index in hand
int findLowestCardIndex(const vector<string>& hand) {
    int lowestVal = 15;
    int lowestIndex = -1;
    for (int i = 0; i < (int)hand.size(); i++) {
        int val = getCardValue(hand[i]);
        if (val < lowestVal) {
            lowestVal = val;
            lowestIndex = i;
        }
    }
    return lowestIndex;
}

// Find index of card equal or higher than minValue (first one found)
int findMatchingOrHigherCardIndex(const vector<string>& hand, int minValue) {
    for (int i = 0; i < (int)hand.size(); i++) {
        if (getCardValue(hand[i]) >= minValue) {
            return i;
        }
    }
    return -1;
}

string playCardForAI(vector<string>& hand, int currentMax) {
    int idx = findMatchingOrHigherCardIndex(hand, currentMax);
    if (idx == -1) {
        // No card to beat currentMax, play lowest
        idx = findLowestCardIndex(hand);
    }
    string card = hand[idx];
    hand.erase(hand.begin() + idx);
    return card;
}

void showHand() {
    cout << "Player 1's hand: ";
    for (int i = 0; i < (int)p1Hand.size(); i++) {
        cout << "(" << (i + 1) << ") " << p1Hand[i] << " ";
    }
    cout << "\n";
}

// Fix winner determination: first player with max value wins
int determineRoundWinner(int p1Val, int p2Val, int p3Val) {
    int maxVal = max({ p1Val, p2Val, p3Val });
    if (p1Val == maxVal) return 1;
    if (p2Val == maxVal) return 2;
    return 3;
}

void playRound(int startingPlayer) {
    int currentMax = 0;
    string cardsPlayed[3];
    int playerOrder[3];

    // Determine order of players
    if (startingPlayer == 1) {
        playerOrder[0] = 1;
        playerOrder[1] = 2;
        playerOrder[2] = 3;
    }
    else if (startingPlayer == 2) {
        playerOrder[0] = 2;
        playerOrder[1] = 3;
        playerOrder[2] = 1;
    }
    else {
        playerOrder[0] = 3;
        playerOrder[1] = 1;
        playerOrder[2] = 2;
    }

    for (int i = 0; i < 3; i++) {
        int currentPlayer = playerOrder[i];
        cout << "Player " << currentPlayer << "'s turn\n";

        if (currentPlayer == 1) {
            showHand();
            int choice;
            bool validChoice = false;
            while (!validChoice) {
                cout << "Choose a card to play (1-" << p1Hand.size() << "): ";
                if (!(cin >> choice)) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Invalid input! Please enter a number.\n";
                    continue;
                }
                if (choice < 1 || choice >(int)p1Hand.size()) {
                    cout << "Invalid choice! Please select a valid card number.\n";
                    continue;
                }
                int selectedCardVal = getCardValue(p1Hand[choice - 1]);
                if (i == 0 || selectedCardVal >= currentMax) {
                    validChoice = true;
                }
                else {
                    cout << "You must play a card equal or higher than " << currentMax << ".\n";
                }
            }
            /** Create a system to force the lowest card to be played if there are no higher or matching cards in the current player's hand. 
             * System should include:
             * Scanning the current player's hand before every card played.
             * Identifying the value of each card.
             * Identifying that the highest-vale card must be matched or beaten.
             * Identifying that if no cards meet the above criteria, the lowest-value card in the current player's hand.
             */                                                                             
                        
            cardsPlayed[i] = p1Hand[choice - 1];
            p1Hand.erase(p1Hand.begin() + (choice - 1));
        }
        else if (currentPlayer == 2) {
            cardsPlayed[i] = playCardForAI(p2Hand, currentMax);
            cout << "Player 2 plays: " << cardsPlayed[i] << "\n";
        }
        else { // Player 3
            cardsPlayed[i] = playCardForAI(p3Hand, currentMax);
            cout << "Player 3 plays: " << cardsPlayed[i] << "\n";
        }

        currentMax = max(currentMax, getCardValue(cardsPlayed[i]));

        cout << "\n";
    }

    // Store cards played to track endgame lowest card
    playedCardsP1.push_back(cardsPlayed[0]);
    playedCardsP2.push_back(cardsPlayed[1]);
    playedCardsP3.push_back(cardsPlayed[2]);

    // Show cards graphically after round
    roundEndGraphics(cardsPlayed[0], cardsPlayed[1], cardsPlayed[2]);

    int p1Val = getCardValue(cardsPlayed[0]);
    int p2Val = getCardValue(cardsPlayed[1]);
    int p3Val = getCardValue(cardsPlayed[2]);

    int winnerPlayer = determineRoundWinner(p1Val, p2Val, p3Val);
    cout << "Round winner: Player " << winnerPlayer << "!\n\n";

    // Add cards won to winner's hand (simulate)
    if (winnerPlayer == 1) {
        p1Hand.push_back(cardsPlayed[0]);
        p1Hand.push_back(cardsPlayed[1]);
        p1Hand.push_back(cardsPlayed[2]);
    }
    else if (winnerPlayer == 2) {
        p2Hand.push_back(cardsPlayed[0]);
        p2Hand.push_back(cardsPlayed[1]);
        p2Hand.push_back(cardsPlayed[2]);
    }
    else {
        p3Hand.push_back(cardsPlayed[0]);
        p3Hand.push_back(cardsPlayed[1]);
        p3Hand.push_back(cardsPlayed[2]);
    }

    // Check if any player has 1 card left => end game
    if (p1Hand.size() == 1 || p2Hand.size() == 1 || p3Hand.size() == 1) {
        endGame();
    }
    else {
        playRound(winnerPlayer);
    }
}

void endGame() {
    // Find lowest card among the last cards played (or all played cards)
    vector<string> allPlayedCards;
    allPlayedCards.insert(allPlayedCards.end(), playedCardsP1.begin(), playedCardsP1.end());
    allPlayedCards.insert(allPlayedCards.end(), playedCardsP2.begin(), playedCardsP2.end());
    allPlayedCards.insert(allPlayedCards.end(), playedCardsP3.begin(), playedCardsP3.end());

    int lowestVal = 15;
    string lowestCard = "";
    for (auto& c : allPlayedCards) {
        int val = getCardValue(c);
        if (val < lowestVal) {
            lowestVal = val;
            lowestCard = c;
        }
    }

    cout << "Game over! Lowest card played is: " << lowestCard << "\n";
    cout << "Player with the lowest card wins!\n";
    system("pause");
    system("cls");
    game(); // Return to main menu
}
