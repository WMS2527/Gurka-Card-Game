#include <iostream>
#include <algorithm>
#include <random>
#include <ctime>
#include <limits>
#include <windows.h>
#include <vector>
#include <string>

using namespace std;

// Global player hands
vector<string> p1Hand;
vector<string> p2Hand;
vector<string> p3Hand;

// Cards played this round
string p1CardPlayed, p2CardPlayed, p3CardPlayed;

// Track all cards played (to find lowest card at the end)
vector<string> playedCardsP1;
vector<string> playedCardsP2;
vector<string> playedCardsP3;

// Function declarations
void game();
void displayRules();
void scoreboard();
void dealCards();
int getCardValue(const string& card);
string getSuit(const string& card);
int findLowestCardIndex(const vector<string>& hand);
int findMatchingOrHigherCardIndex(const vector<string>& hand, int minValue);
string playCardForAI(vector<string>& hand, int currentMax);
void playRound(int startingPlayer);
void showHand();
int determineRoundWinner(const string& c1, const string& c2, const string& c3);
void endGame();

int main()
{
    SetConsoleOutputCP(CP_UTF8);
    game(); // This controls everything
    return 0;
}

void game() {
    char homeInput;
    cout << "╔═══════════════════════════════════════════════╗\n";
    cout << "║             ╔═══╦╗ ╔╦═══╦╗╔═╦═══╗             ║\n";
    cout << "║             ║╔═╗║║ ║║╔═╗║║║╔╣╔═╗║             ║\n";
    cout << "║             ║║ ╚╣║ ║║╚═╝║╚╝╝║║ ║║             ║\n";
    cout << "║             ║║╔═╣║ ║║╔╗╔╣╔╗║║╚═╝║             ║\n";
    cout << "║             ║╚╩═║╚═╝║║║╚╣║║╚╣╔═╗║             ║\n";
    cout << "║             ╚═══╩═══╩╝╚═╩╝╚═╩╝ ╚╝             ║\n";
    cout << "╚═══════════════════════════════════════════════╝\n";
    cout << "            Press 1 to start the game            \n";
    cout << "            Press 2 to view the rules            \n";
    cout << "            Press 3 to view the score            \n";
    cout << "            Press 0 to close the game            \n";
    cin >> homeInput;

    if (homeInput == '2') {
        system("cls");
        displayRules();
    } else if (homeInput == '1') {
        cout << "Starting the game...\n";
        system("cls");
        dealCards();
        playRound(1); // Player 1 starts the first round
    } else if (homeInput == '3') {
        system("cls");
        scoreboard();
    } else if (homeInput == '0') {
        cout << "Exiting...\n";
        exit(0);
    } else {
        system("cls");
        cout << "Invalid input. Please try again.\n";
        game(); // restart the prompt
    }
}

void displayRules()
{
    char rulesInput;
    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                    The Rules of Gurka                                          ║\n";
    cout << "║                                                                                                ║\n";
    cout << "║Gurka is played by 3-7 players                                                                  ║\n";
    cout << "║Each player is dealt 6 cards                                                                    ║\n";
    cout << "║Player 1 goes first to start, and the winner of each trick (round) begins the next one          ║\n";
    cout << "║Play goes in numerical order (1, 2, 3, etc. for game start)                                     ║\n";
    cout << "║H, D, S, and C after a number represent card (E.X. 10S is the 10 of Spades)                     ║\n";
    cout << "║After the first card in each round, players must match or beat the value of the highest card    ║\n";
    cout << "║If this is not possible, your lowest value card must be played                                  ║\n";
    cout << "║Repeat this until all players have 1 card left                                                  ║\n";
    cout << "║The player with the lowest value card at the end wins                                           ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> rulesInput;

    if (rulesInput == '0') {
        cout << "Exiting...\n";
        exit(0);
    } else {
        system("cls");
        game();
    }
}

// Displays a scoreboard showing how many wins each player gets.
// May be buggy.
void scoreboard()
{
    char scoreInput;
    int p1Wins;
    int p2Wins;
    int p3Wins;
    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                            Scoreboard                                          ║\n";
    cout << "║Every win each player gets will appear here.                                                    ║\n";
    cout << "║Resets when the game is closed.                                                                 ║\n";
    cout << "║Player 1's Score: " << p1Wins << "                                                               ║\n";
    cout << "║Player 2's Score: " << p2Wins << "                                                               ║\n";
    cout << "║Player 3's Score: " << p3Wins << "                                                               ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> scoreInput;

    if (scoreInput = '0')
    {
        exit(0);
    }
    else
    {
        game();
    }

}

void dealCards()
{
    vector<string> deck = {"2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "10H", "JH", "QH", "KH", "AH",
                           "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "10D", "JD", "QD", "KD", "AD",
                           "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "10S", "JS", "QS", "KS", "AS",
                           "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "10C", "JC", "QC", "KC", "AC"};

    random_device rd;
    mt19937 g(rd());
    shuffle(deck.begin(), deck.end(), g);

    p1Hand.clear();
    p2Hand.clear();
    p3Hand.clear();
    playedCardsP1.clear();
    playedCardsP2.clear();
    playedCardsP3.clear();

    for (int i = 0; i < 6; ++i) {
        p1Hand.push_back(deck.back()); deck.pop_back();
        p2Hand.push_back(deck.back()); deck.pop_back();
        p3Hand.push_back(deck.back()); deck.pop_back();
    }

    // Show only Player 1's hand:
    cout << "Player 1's hand: ";
    for (int i = 0; i < 6; ++i) cout << "(" << (i + 1) << ") " << p1Hand[i] << " ";
    cout << "\n\n";

    cout << "(Other player's cards are hidden.)\n\n";
}

int getCardValue(const string& card)
{
    string rank;

    if (card.size() == 3) // e.g. "10H"
        rank = card.substr(0, 2);
    else
        rank = card.substr(0, 1);

    if (rank == "A") return 14;
    if (rank == "K") return 13;
    if (rank == "Q") return 12;
    if (rank == "J") return 11;

    try {
        return stoi(rank);
    } catch (...) {
        return 0;
    }
}

string getSuit(const string& card) {
    return card.substr(card.size() - 1, 1);
}

// Find lowest card index in hand
int findLowestCardIndex(const vector<string>& hand) {
    int minIndex = 0;
    int minVal = getCardValue(hand[0]);
    for (int i = 1; i < (int)hand.size(); i++) {
        int val = getCardValue(hand[i]);
        if (val < minVal) {
            minVal = val;
            minIndex = i;
        }
    }
    return minIndex;
}

// Find card that matches or beats currentMax, or return -1 if none
int findMatchingOrHigherCardIndex(const vector<string>& hand, int currentMax) {
    int chosenIndex = -1;
    int minValAbove = 1000;
    for (int i = 0; i < (int)hand.size(); i++) {
        int val = getCardValue(hand[i]);
        if (val >= currentMax && val < minValAbove) {
            minValAbove = val;
            chosenIndex = i;
        }
    }
    return chosenIndex;
}

// AI plays card following the rule: beat or match highest card if possible; else lowest card
string playCardForAI(vector<string>& hand, int currentMax) {
    int index = findMatchingOrHigherCardIndex(hand, currentMax);
    if (index == -1) {
        // Play lowest card
        index = findLowestCardIndex(hand);
    }
    string card = hand[index];
    hand.erase(hand.begin() + index);
    return card;
}

// Show Player 1's current hand with indices
void showHand() {
    cout << "Your current hand: ";
    for (int i = 0; i < (int)p1Hand.size(); i++) {
        cout << "(" << (i + 1) << ") " << p1Hand[i] << " ";
    }
    cout << "\n";
}

// Play a single round starting with startingPlayer (1, 2, or 3)
void playRound(int startingPlayer) {
    int currentMax = 0;
    string cardsPlayed[3]; // index 0 = player 1, 1=player 2, 2=player 3
    int playerOrder[3];

    // Determine order of play
    if (startingPlayer == 1) playerOrder[0] = 1, playerOrder[1] = 2, playerOrder[2] = 3;
    else if (startingPlayer == 2) playerOrder[0] = 2, playerOrder[1] = 3, playerOrder[2] = 1;
    else playerOrder[0] = 3, playerOrder[1] = 1, playerOrder[2] = 2;

    // Play cards in order
    for (int i = 0; i < 3; i++) {
        int p = playerOrder[i];
        if (p == 1) {
            // Player 1 turn
            showHand();
            int choice;
            cout << "Player 1's turn. Select a card to play: ";
            cin >> choice;
            if (cin.fail() || choice < 1 || choice >(int)p1Hand.size()) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Invalid choice. Try again.\n";
                i--; // retry this player turn
                continue;
            }
            string selectedCard = p1Hand[choice - 1];
            int val = getCardValue(selectedCard);
            // Enforce rule: must match or beat currentMax if possible
            int mustBeatIndex = findMatchingOrHigherCardIndex(p1Hand, currentMax);
            if (val < currentMax && mustBeatIndex != -1) {
                cout << "You must play a card that matches or beats the highest card (" << currentMax << "). Try again.\n";
                continue;
            }
            p1Hand.erase(p1Hand.begin() + choice - 1);
            cardsPlayed[0] = selectedCard;
            currentMax = max(currentMax, val);
            cout << "You played: " << selectedCard << "\n\n";
        }
        else if (p == 2) {
            string aiCard = playCardForAI(p2Hand, currentMax);
            int val = getCardValue(aiCard);
            cardsPlayed[1] = aiCard;
            currentMax = max(currentMax, val);
            cout << "Player 2 played: " << aiCard << "\n";
        }
        else { // Player 3
            string aiCard = playCardForAI(p3Hand, currentMax);
            int val = getCardValue(aiCard);
            cardsPlayed[2] = aiCard;
            currentMax = max(currentMax, val);
            cout << "Player 3 played: " << aiCard << "\n";
        }
    }

    // Determine winner of the round (player with highest card value)
    int p1Val = getCardValue(cardsPlayed[0]);
    int p2Val = getCardValue(cardsPlayed[1]);
    int p3Val = getCardValue(cardsPlayed[2]);

    int maxVal = max({p1Val, p2Val, p3Val});

    int winnerPlayer = 1;
    if (p2Val == maxVal) winnerPlayer = 2;
    if (p3Val == maxVal) winnerPlayer = 3;

    cout << "\nRound winner: Player " << winnerPlayer << "!\n\n";

    // Store cards played for end game calculation
    playedCardsP1.push_back(cardsPlayed[0]);
    playedCardsP2.push_back(cardsPlayed[1]);
    playedCardsP3.push_back(cardsPlayed[2]);

    if (!p1Hand.empty()) {
        playRound(winnerPlayer);
    }
    else {
        endGame();
    }
}

// At the end of the game, determine the player with the lowest card played in the whole game
void endGame() {
    int p1Wins;
    int p2Wins;
    int p3Wins;
    cout << "Game over\n";

    // Find lowest card among all played cards of each player
    auto findLowestValueCard = [](const vector<string>& cards) {
        int minVal = 1000;
        string minCard = "";
        for (const auto& c : cards) {
            int val = getCardValue(c);
            if (val < minVal) {
                minVal = val;
                minCard = c;
            }
        }
        return pair<int, string>{minVal, minCard};
    };

    auto p1Lowest = findLowestValueCard(playedCardsP1);
    auto p2Lowest = findLowestValueCard(playedCardsP2);
    auto p3Lowest = findLowestValueCard(playedCardsP3);

    cout << "Player 1's lowest card played: " << p1Lowest.second << " (Value " << p1Lowest.first << ")\n";
    cout << "Player 2's lowest card played: " << p2Lowest.second << " (Value " << p2Lowest.first << ")\n";
    cout << "Player 3's lowest card played: " << p3Lowest.second << " (Value " << p3Lowest.first << ")\n";

    // Determine overall winner (lowest card wins)
    int lowestVal = p1Lowest.first;
    int winner = 1;
    if (p2Lowest.first < lowestVal) {
        lowestVal = p2Lowest.first;
        winner = 2;
    }
    if (p3Lowest.first < lowestVal) {
        lowestVal = p3Lowest.first;
        winner = 3;
    }

    if (winner = 2)
    {
        p2Wins++;
    }
    else if (winner = 3)
    {
        p3Wins++;
    }
    else
    {
        p1Wins++;
    }

    cout << "\n Player " << winner << " wins the game with the lowest card! \n\n";

    cout << "Press any key to return to main menu...\n";
    cin.ignore();
    cin.get();

    system("cls");
    game();
}
